security:
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  providers:
    users:
      entity:
        class: App\Entity\User
        property: email
  firewalls:

    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    main:
      two_factor:
        auth_form_path: 2fa_login    # The route name you have used in the routes.yaml
        check_path: 2fa_login_check  # The route name you have used in the routes.yaml
        default_target_path: /index

      form_login:
        login_path: app_signIn
        check_path: app_signIn
        default_target_path: app_project_index
        always_use_default_target_path: true

      logout:
        path: /logout
        target: app_index

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used

  access_decision_manager:
    strategy: affirmative # Affirmative is default behavior

  role_hierarchy:
    ROLE_ADMIN: ROLE_USER

  access_denied_url: /access-denied

  access_control:
    - { path: ^/, roles: PUBLIC_ACCESS }
    - { path: ^/(signIn|signUp|index|access-denied|error|logout), roles: PUBLIC_ACCESS }
    - { path: ^/(2fa|2fa_check), roles: [IS_AUTHENTICATED_2FA_IN_PROGRESS, ROLE_USER] }
    - { path: ^/* , roles: ROLE_USER }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
